import joblib
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.ensemble import StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

# List of selected features
selected_features = [
    'Concom_Macrolides_And_Similar_Types', 'Idn_Indicator', 'Risk_Segment_Prior_Ntm',
    'Change_Risk_Segment', 'Comorb_Encounter_For_Screening_For_Malignant_Neoplasms',
    'Concom_Viral_Vaccines', 'Gluco_Record_Prior_Ntm', 'Comorb_Encounter_For_Immunization',
    'Risk_Segment_During_Rx', 'Comorb_Encntr_For_Oth_Sp_Exam_W_O_Complaint_Suspected_Or_Reprtd_Dx',
    'Region', 'Ntm_Specialist_Flag', 'Tscore_Bucket_During_Rx', 'Comorb_Other_Disorders_Of_Bone_Density_And_Structure',
    'Comorb_Dorsalgia', 'Dexa_Freq_During_Rx', 'Concom_Cephalosporins', 'Comorb_Personal_history_of_malignant_neoplasm',
    'Comorb_Long_Term_Current_Drug_Therapy', 'Comorb_Encntr_For_General_Exam_W_O_Complaint,_Susp_Or_Reprtd_Dx',
    'Gluco_Record_During_Rx', 'Comorb_Vitamin_D_Deficiency', 'Dexa_During_Rx',
    'Comorb_Personal_History_Of_Other_Diseases_And_Conditions', 'Concom_Anaesthetics_General',
    'Comorb_Gastro_esophageal_reflux_disease', 'Count_Of_Risks', 'Concom_Broad_Spectrum_Penicillins',
    'Comorb_Osteoporosis_without_current_pathological_fracture', 'Concom_Fluoroquinolones',
    'Comorb_Other_Joint_Disorder_Not_Elsewhere_Classified', 'Ntm_Speciality_Bucket'
]

# Assuming you have a DataFrame `df` with your data
X = df[selected_features]
y = df['Persistency_Flag']  # Target variable

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define Preprocessing Pipeline for categorical and numerical data
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), X.select_dtypes(include=['int64', 'float64']).columns),  # Scaling numerical features
        ('cat', OneHotEncoder(handle_unknown='ignore'), X.select_dtypes(include=['object']).columns)  # Encoding categorical features
    ])

# Create a final pipeline including preprocessing and model
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('stack_model', StackingClassifier(
        estimators=[
            ('lr', LogisticRegression()), 
            ('dt', DecisionTreeClassifier(max_depth=5)),
            ('rf', RandomForestClassifier(n_estimators=100))
        ], 
        final_estimator=RandomForestClassifier(n_estimators=100)
    ))
])

# Train the pipeline with the model
pipeline.fit(X_train, y_train)

# Save the entire pipeline (preprocessing + model)
joblib.dump(pipeline, 'preprocessing_pipeline.joblib')